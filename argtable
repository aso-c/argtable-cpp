/*!
 * @brief Tiny C++ wrapper on the pure ANSI-C command-line parsing library Argtable3
 * https://www.argtable.org (https://github.com/argtable/argtable3)
 * Header Include file
 * 	@file	argtable
 *	@author	(Solomatov A.A. (aso)
 *	@date Created 08.10.2024
 *	      Updated 25.02.2025
 *	@version v.0.7.2
 */



#ifndef __ARGTABLE3_CPP__
#define __ARGTABLE3_CPP__


#include "argtable3/argtable3.h"

#include <array>
#include <list>
#include <memory>

//#include <string>
#include <vector>
#include <variant>


#ifndef __cplusplus
#error "'arctable' file is usable in C++ projects only."
#endif

#ifndef ARGTABLE3
#error "The 'argtable3/arctable3.h' header from the Arctable3 library must be included before including this file"
#endif


namespace arg
{
    namespace table
    {

	/// abbreviatures for smart pointers to argtable items
	using lit  = std::shared_ptr<struct arg_lit>;
	using integer = std::shared_ptr<struct arg_int>;
	using dbl  = std::shared_ptr<struct arg_dbl>;
	using str  = std::shared_ptr<struct arg_str>;
	using rex  = std::shared_ptr<struct arg_rex>;
	using file = std::shared_ptr<struct arg_file>;
	using date = std::shared_ptr<struct arg_date>;
	using rem  = std::shared_ptr<struct arg_rem>;
	using end  = std::shared_ptr<struct arg_end>;

	/// Strong restrictions fir syntax table items: only constructor passed pointers are accepted
	template <typename Item>
	concept Entities = std::same_as<Item, struct arg_rem* > ||
			    std::same_as<Item, struct arg_lit*> ||
			    std::same_as<Item, struct arg_int*> ||
			    std::same_as<Item, struct arg_dbl*> ||
			    std::same_as<Item, struct arg_str*> ||
			    std::same_as<Item, struct arg_rex*> ||
			    std::same_as<Item, struct arg_file*>||
			    std::same_as<Item, struct arg_date*>;

	template <typename Item>
	concept Holded = std::same_as<Item, rem> ||
			    std::same_as<Item, lit> ||
			    std::same_as<Item, integer> ||
			    std::same_as<Item, dbl> ||
			    std::same_as<Item, str> ||
			    std::same_as<Item, rex> ||
			    std::same_as<Item, file>||
			    std::same_as<Item, date>||
			    std::same_as<Item, end>;

	/// Extended restrictions: add pointer to the arg_end struct
	template <typename Item>
	concept Entities_ext = Entities<Item> || std::same_as<Item, struct arg_end*>;


	namespace item
	{

//	    using holder = std::variant<rem, lit, integer, dbl, str, rex, file, date, end>;
	    struct holder: public std::variant<rem, lit, integer, dbl, str, rex, file, date, end>
	    {
		template <typename Item>
		requires Holded<Item>
		holder(Item&& item): std::variant<rem, lit, integer, dbl, str, rex, file, date, end>(std::forward<Item>(item)) {};

		template <typename Entity>
		requires Entities<Entity*>
		holder(Entity*&& entity): std::variant<rem, lit, integer, dbl, str, rex, file, date, end>(std::shared_ptr<Entity>(std::forward<Entity>(entity))) {};
	    }; /* struct arg::table::holder */

	    /// array of the syntax items
	    template <std::size_t size>
	    using row = std::array<holder, size>;

	    template <std::size_t rowsize>
	    using multiholder = row<rowsize>;

	    /// array of the void* pointers to the syntax data item buffers
	    template <std::size_t size>
	    using keeper_t = std::array<void*, size>;

	}; /* namespace arg::table::item */



	/// Rest restrictions: extended with the 'int' type
	template <typename Item>
	concept Entities_rest = Entities<Item> || std::same_as<Item, int>;


	/// Syntax class definition
	template <std::size_t sz>
	class syntax
	{
	public:

	    /// deleter for the artable items
	    template <Entities_ext Item>
	    struct del
	    {
		void operator()(Item item) const
		{
		    arg_freetable(reinterpret_cast<void**>(&item), 1);
		}; /* void operator()(Item* item) const */
	    }; /* struct arg::table::syntax::del */
	    template <Entities_ext Item>
	    del() ->  del<Item>;

	    template <Entities... Items>
	    syntax(int n, Items&&... items):
		keep{reinterpret_cast<void*>(items)..., reinterpret_cast<void*>(arg_end(n/*cargendef*/))},
		description {std::shared_ptr<std::remove_pointer_t<Items>>(items, del<Items>())..., std::shared_ptr<struct arg_end>(reinterpret_cast<struct arg_end*>(keep[sizeof...(Items)]))}
	    {};

	    template <Entities... Items>
	        syntax(Items&&... items/*, int n = 20*/):
		syntax(sz/*defargendc*/, std::forward<Items>(items)...)
	    {};

	    /// Copy constructor
	    syntax(const syntax<sz>& other):
		keep{other.keep},
		description{other.description}
	    {};
	    /// Move constructor
	    syntax(syntax<sz>&& other) noexcept:
		keep{std::move(other.keep)},
		description{std::move(other.description)}
	    {};

	    /// size of the syntax type (qty of the significant items)
	    constexpr static std::size_t size() noexcept { return sz; };

	    item::keeper_t<sz+1>	keep;	///< array of void* pointers to a synatax item declarations
	    item::row<sz + 1>	description;	///< array with pointers to syntax item declarations (std::variant to argtable types)

	    item::holder& operator[] (std::size_t idx) { return description[idx]; };

	    /// print the [short] usage of the current syntax string
	    void usage(FILE* fp, const char suffix[]) const {
		arg_print_syntax(fp, std::get<struct arg_end*>(description.back()), suffix);
	    };

	    /// print the verbose usage of the current syntax string
	    void verbose(FILE* fp, const char suffix[]) const {
		arg_print_syntaxv(fp, std::get<struct arg_end*>(description.back()), suffix);
	    };

	    /// print the glossary for the syntax string
	    void glossary(FILE* fp, const char format[]) const {
		arg_print_glossary(fp, std::get<struct arg_end*>(description.back()), format);
	    };

	    int parse(int argc, char* argv[]);	///< parsing the sended parameters

	    /// check, if the syntax definitions - contained the NULL pointer items
	    /// @return true (!NULL) - syntax definition row contain the NULL pointers
	    ///		false (NULL) -  syntax definition row is NOT contained the NULL pointers
	    bool nullcheck() const
	    {
		return arg_nullcheck(keep.data());
	    };

	    int err() const { return errcnt; };	///< error status of the last operation
	    int error() const { return errcnt; };	///< error status of the last operation

	    /// print the error status of the command line parsing
	    void errors(FILE* fp, const char pname[]) const {
		arg_print_errors(fp, std::get<arg::table::end>(description.back()).get(), pname);
	    };

	    /// copy assignment operator
	    syntax& operator=(const syntax<sz>& other);
	    /// move assignment operator
	    syntax& operator=(syntax<sz>&& other);

	    /// default value for argend counter
	    constexpr static int defargendc = 20;

	private:
	    mutable int errcnt = 0;

	}; /* template struct arg::table::syntax::def */

	template <typename ... Args>
	syntax(Args*...) -> syntax<sizeof...(Args)>;

	template <typename ... Args>
	syntax(int, Args*...) -> syntax<sizeof...(Args)>;

	template <typename ... Args>
	syntax(Args*..., int) -> syntax<sizeof...(Args)>;

	template <std::size_t sz>
	syntax(syntax<sz>&) -> syntax<sz>;

//	    template <Entities... Items>
//	    syntax(Items*..., const int n) -> syntax<sizeof...(Items), n>;

//	    template <Entities... Items>
//	    syntax(Items*...) -> syntax<sizeof...(Items)>;

//	    template <Entities... Items>
//	    syntax(int, Items*...) -> syntax<sizeof...(Items)>;

	/// copy assignment operator inline implementation
	template <std::size_t sz>
	inline syntax<sz>& syntax<sz>::operator=(const syntax<sz>& other)
	{
	    keep = other.keep;
	    description = other.description;
	    return *this;
	}; /* template arg::table::syntax& syntax::operator=(const def&) */

	/// move assignment operator inline implementation
	template <std::size_t sz>
	inline syntax<sz>& syntax<sz>::operator=(syntax<sz>&& other)
	{
	    keep = std::move(other.keep);
	    description = std::move(other.description);
	    return *this;
	}; /* template arg::table::syntax& syntax::operator=(def&&) */



	///TODO  Definition multi syntaxes complex (now is not implemented yet)
	template <std::size_t rows, std::size_t columns>
	struct multisyntax
	{

	}; /* struct arg::table::multisyntax */


	/// Constrains template concept arg::table::Syntaxes
	/// for a template struct arg::table::act_t
	template <typename TSyntax>
	concept Syntaxes = std::same_as<TSyntax, syntax<TSyntax::size()>>;

	/// Define base template struct for command action, procedures & templates with the syntaxes
	/// type aggregate the static syntax field and the static method invoke for declarated command executing
	/// and inner struct contexted with static method contexted::invoke for command execution with context
	template <Syntaxes auto &Syntax>
	struct act_t
	{
	    using invoke_func_t = esp_console_cmd_func_t;

	    static constexpr table::syntax<Syntax.size()> &syntax = Syntax;

	    /// Execute command procedure for the pointer to own syntax object
	    static
	    esp_err_t invoke(int argc, char* argv[]);

	    /// Run the Help procedure for the pointer to own syntax object
	    static
	    esp_err_t help(int argc, char* argv[]);

	    struct contexted
	    {
		/// alias for type of the esp console execution command w/context procedures
		using act_invoke_func_t = esp_console_cmd_func_with_context_t;

		/// Execute command procedure with the pointer to the own syntax object
		static
		esp_err_t invoke(void* context, int argc, char* argv[]);

	    }; /* template struct arg::table::act_t::contexted */

	}; /* template struct arg::table::act_t */

	/// "Zero-syntax" specialization of the base for the command action/procedures
	struct act
	{
	    /// type alias of the procedures for context-free esp console execution command
	    using invoke_func = esp_console_cmd_func_t;


	    /// placeholder for the inner class "syntax" - stab for empty syntax string
	    struct Syntax
	    {
		/// stub type for zero syntax act_t specialization
		struct zero_syntax_keeper
		{
		    void* data() { return nullptr; };
		}; /* arg::table::act::syntax::zero_syntax_keeper */

		zero_syntax_keeper keep;
	    }; /* arg::table::act::syntax */

	    static Syntax syntax;

	    /// Execute command procedure without the syntax object (zero syntax)
	    static
	    esp_err_t invoke(int argc, char* argv[]);

	    /// Run the Help procedure with the pointer to the own syntax object
	    static
	    esp_err_t help(int argc, char* argv[]);

	    struct contexted
	    {
		/// type alias of the procedures for esp console execution command w/context
		using invoke_func = esp_console_cmd_func_with_context_t;

		/// Execute command procedure with the pointer to the own syntax object
		static
		esp_err_t invoke(void* context, int argc, char* argv[]);

	    }; /* struct arg::table::act::contexted */

	}; /* struct arg::table::act */

    };/* namespace arg::table */


    ///< parsing the sended parameters
    template <std::size_t size>
    inline int table::syntax<size>::parse(int argc, char* argv[]) {
	return (errcnt = arg_parse(argc, argv, keep.data()));
    }; /* table::syntax_t<Args...>::parse() */


}; /* namespace arg */

#endif // __ARGTABLE3_CPP__

//--[ argtable ]-------------------------------------------------------------------------------------------------------
