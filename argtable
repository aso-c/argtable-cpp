/*!
 * @brief Tiny C++ wrapper on the pure ANSI-C command-line parsing library Argtable3
 * https://www.argtable.org (https://github.com/argtable/argtable3)
 * Header Include file
 * 	@file	argtable
 *	@author	(Solomatov A.A. (aso)
 *	@date Created 08.10.2024
 *	      Updated 24.10.2024
 *	@version 0.4
 */



#ifndef __ARGTABLE3_CPP__
#define __ARGTABLE3_CPP__


#include "argtable3/argtable3.h"
#include <list>
#ifndef __cplusplus
#error "'arctable' file is usable in C++ projects only."
#endif

#ifndef ARGTABLE3
#error "Need include the 'arctable.h' file from the Arctable3 library before this header file"
#endif


namespace Arg
{


#if 0
/*
 * The arg_hdr struct defines properties that are common to all arg_xxx structs.
 * The argtable library requires each arg_xxx struct to have an arg_hdr
 * struct as its first data member.
 * The argtable library functions then use this data to identify the
 * properties of the command line option, such as its option tags,
 * datatype string, and glossary strings, and so on.
 * Moreover, the arg_hdr struct contains pointers to custom functions that
 * are provided by each arg_xxx struct which perform the tasks of parsing
 * that particular arg_xxx arguments, performing post-parse checks, and
 * reporting errors.
 * These functions are private to the individual arg_xxx source code
 * and are the pointer to them are initiliased by that arg_xxx struct's
 * constructor function. The user could alter them after construction
 * if desired, but the original intention is for them to be set by the
 * constructor and left unaltered.
 */
typedef struct arg_hdr {
    char flag;             /* Modifier flags: ARG_TERMINATOR, ARG_HASVALUE. */
    const char* shortopts; /* String defining the short options */
    const char* longopts;  /* String defiing the long options */
    const char* datatype;  /* Description of the argument data type */
    const char* glossary;  /* Description of the option as shown by arg_print_glossary function */
    int mincount;          /* Minimum number of occurences of this option accepted */
    int maxcount;          /* Maximum number of occurences if this option accepted */
    void* parent;          /* Pointer to parent arg_xxx struct */
    arg_resetfn* resetfn;  /* Pointer to parent arg_xxx reset function */
    arg_scanfn* scanfn;    /* Pointer to parent arg_xxx scan function */
    arg_checkfn* checkfn;  /* Pointer to parent arg_xxx check function */
    arg_errorfn* errorfn;  /* Pointer to parent arg_xxx error function */
    void* priv;            /* Pointer to private header data for use by arg_xxx functions */
} arg_hdr_t;
#endif


    struct header: public arg_hdr
    {
	header& assign(const arg_hdr& hdr) {set(*this, hdr); return *this;};
//	header& assign(const header& hdr) {set(*this, static_cast<const arg_hdr&>(hdr)); return *this;};
	header& assign(const arg_hdr&& hdr) {set(*this, hdr); return *this;};
//	header& assign(const header&& hdr) {set(*this, static_cast<arg_hdr&&>(hdr)); return *this;};

	static void set(arg_hdr& dest, const arg_hdr& src);	///< assign values of "srs" to "dest"
	static void set(arg_hdr& dest, arg_hdr&& tsrc);		///< move values of temporary "tsrs" to the "dest"
    }; /* arg_hdr */



    /// Abstract virtual class for store/pointing to specific Arg::table items
    struct item
    {
	/// Get stored hdr field
	virtual arg_hdr& header() = 0;
	const arg_hdr& header() const;
	virtual item* clone() const = 0;	///< Clone object of the derived from the Arg::item type
	/// Set stored hdr field
	void header(const item& it) { header(it.header()); };
	void header(const arg_hdr&);
	void header(arg_hdr&&);
	virtual ~item() {};

    protected:
//	static void set_hdr(arg_hdr& dest, const arg_hdr& src);	///< assign values of "srs" to "dest"
//	static void set_hdr(arg_hdr& dest, arg_hdr&& tsrc);	///< move values of temporary "tsrs" to the "dest"
    }; /* Arg::item */



    // Any kind of specific argtable3 items
    template <class kind>
    struct seed: public item, public kind
    {
	/// copy constructor for long lifetime lvalue pointer
	seed(const kind* arg);
	/// move constructor for temporary rvalue pointer to deallocable object
	seed(kind* && arg): seed(arg) { /*delete*/ free(arg); };
	/// copy constructor
	seed(const seed& arg): seed(static_cast<const kind*>(&arg)) {};
	/// Get stored hdr field
	arg_hdr& header() override { return kind::hdr; };
	/// clone the Arg::end instance into allocated memory object
	seed* clone() const override { return new seed(this); };
	/// assignment the value from other item
	seed& assign(const kind&);
	seed& assign(kind* && parg) { assign(*parg); free(parg); return *this;};
//	seed& assign(const seed& arg) {return assign(static_cast<kind>(arg));};
	seed& operator = (kind* &&parg) { return assign(std::move(parg)); };
	seed& operator = (const kind& otharg) { return assign(otharg); };
//	seed& operator = (const seed& other)  { return assign(other); };

    }; /* template class Arg::seed  */


    using rem = seed<struct arg_rem>;
    using lit = seed<struct arg_lit>;
    using integer = seed<struct arg_int>;
    using dbl = seed<struct arg_dbl>;
    using str = seed<struct arg_str>;
    using rex = seed<struct arg_rex>;
    using file = seed<struct arg_file>;
    using date = seed<struct arg_date>;
    using end  = seed<struct arg_end>;



    /// assignment the value from other item
    template <> Arg::rem& Arg::rem::assign(const struct arg_rem& other);
    template <> Arg::lit& Arg::lit::assign(const struct arg_lit& other);
    template <> Arg::integer& Arg::integer::assign(const struct arg_int& other);
    template <> Arg::dbl& Arg::dbl::assign(const struct arg_dbl& other);
    template <> Arg::str& Arg::str::assign(const struct arg_str& other);
    template <> Arg::rex& Arg::rex::assign(const struct arg_rex& other);
    template <> Arg::file& Arg::file::assign(const struct arg_file& other);
    template <> Arg::date& Arg::date::assign(const struct arg_date& other);
    template <> Arg::end& Arg::end::assign(const struct arg_end& other);






    struct cmd
    {
//	cmd(item* const);	///< Initializing the Arg::cmd with l-value, long lifetime pointer
	cmd(item* &&);		///< Initializing the Arg::cmd with temporary lifetime pointer

	template <class It>
	cmd(It* && pitem);	///< Initializing the Arg::cmd with temporary lifetime pointer to allocated argtable3 struct

	cmd(const cmd&);	///< Initializing the Arg::cmd with l-value, long lifetime ref
	cmd(cmd&& );		///< Initializing the Arg::cmd with temporary lifetime - rvalue ref
	~cmd() {delete arg;};

	cmd& assign(cmd&& other) { swap(other); return *this; };
	cmd& assign(const cmd& other);
	cmd& assign(item* &&otharg) { arg = otharg; return *this; };
	cmd& assign(const item* otharg);

//	cmd& operator = (cmd&& other) { return assign(std::move(other)); };
//	cmd& operator = (const cmd& other) { return assign(other); };
//	cmd& operator = (item* &&otharg) { return assign(std::move(otharg)); };
//	cmd& operator = (const item* otharg) { return assign(otharg); };

	template <typename T>
	cmd& operator = (T&& other) { return assign(std::forward<T>(other)); };

	/// swap the args
	void swap(cmd&) noexcept;

    protected:
	item* arg = nullptr;
    }; /* struct Arg::cmd */




//    template<typename arg_end*>
//    std::list(int, arg_end*) -> std::list<cmd>(int, Arg::end)

    using iterator = std::list<cmd>::iterator;

    // C++ wrapper for definition arctable functionality
    class table
    {
    public:
	table(int mxerrs = 20);	 ///< default constructor
	~table(); ///< destructor

	/// Add new item in argtable
//	esp_err_t addoption(void*);
//	esp_err_t add(cmd&&);
	template <typename C>
	iterator add(C&& c);

//	void** data() /*{ return stor.data(); }*/;
	std::vector<void*> data() /*{ return stor.data(); }*/;

    protected:

//	std::vector<void*> stor;
	std::list<cmd> stor;

    }; /* table */

#if 0
	    /// assignment the value from other item
	    template <> Arg::rem& Arg::rem::assign(const struct arg_rem& other);
	    template <> Arg::lit& Arg::lit::assign(const struct arg_lit& other);
	    template <> Arg::integer& Arg::integer::assign(const struct arg_int& other);
	    template <> Arg::dbl& Arg::dbl::assign(const struct arg_dbl& other);
	    template <> Arg::str& Arg::str::assign(const struct arg_str& other);
	    template <> Arg::rex& Arg::rex::assign(const struct arg_rex& other);
	    template <> Arg::file& Arg::file::assign(const struct arg_file& other);
	    template <> Arg::date& Arg::date::assign(const struct arg_date& other);
	    template <> Arg::end& Arg::end::assign(const struct arg_end& other);
#endif

    template <>
    iterator table::add<cmd&&>(cmd&&);

//    template <typename C>
//    iterator table::add(C&& c arg) {
//	return add<cmd&&>(cmd(new rem(std::move(arg))));
//    };

    template <>
    inline iterator table::add<struct arg_rem*&&>(struct arg_rem*&& arg) {
	return add<cmd&&>(cmd(/*static_cast<item* &&>(*/new rem(std::move(arg))/*)*/));
    };

    template <>
    inline iterator table::add<arg_lit*&&>(arg_lit*&& arg) {
	return add<cmd&&>(cmd(new lit(std::move(arg))));
    };



    template <>
    iterator table::add<struct arg_int*&&>(struct arg_int*&&);
    template <>
    iterator table::add<arg_dbl*&&>(arg_dbl*&&);
    template <>
    iterator table::add<struct arg_str*&&>(struct arg_str*&&);
    template <>
    iterator table::add<arg_rex*&&>(arg_rex*&&);
    template <>
    iterator table::add<arg_file*&&>(arg_file*&&);
    template <>
    iterator table::add<arg_date*&&>(arg_date*&&);
    template <>
    iterator table::add<struct arg_end*&&>(struct arg_end*&&);


}; /* namespace Arg*/


#endif // __ARGTABLE3_CPP__

//--[ argtable ]-------------------------------------------------------------------------------------------------------
