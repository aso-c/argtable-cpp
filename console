/*!
 * @file console
 *
 * @brief Tiny C++ wrapper at ESP32 console library
 *
 * @detail Declaration of the classes, types & procedures for the C++ wrapper on ESP32 console library
 * Header include file.
 *
 * @section LICENCE
 *
 * This code is in the Public Domain (or CC0 licensed, at your option.)
 *
 * Unless required by applicable law or agreed to in writing, this
 * software is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied.
 *
 * @author: Solomatov A.A. (aso)
 * @version 0.6.9
 * @date Created on: 25 дек. 2024 г.
 *	    Updated: 11.02.2025
 */



#ifndef __CONSOLE_CPP_WRAPPER__
#define __CONSOLE_CPP_WRAPPER__


#ifndef __cplusplus
#error "'arctable' file is usable in C++ projects only."
#endif

#ifndef ESP_CONSOLE_CONFIG_DEFAULT
#error "The <esp_console.h> header must be included before including this file"
#endif

#ifndef __ARGTABLE3_CPP__
#error "The <'argtable> header file must be included before including this file"
#endif


namespace esp
{
    namespace console
    {

	namespace Action
	{
	    template <class Act>
	    concept nocontext = requires(int argc, char* argv[], esp_err_t ret)
	    {
		ret = Act::invoke(argc, argv);
	    }; /* concept esp::console::Action::nocontext */

	    template <class Act>
	    concept contexted = requires(void* context, int argc, char* argv[], esp_err_t ret)
	    {
		typename Act::contexted;
		ret = Act::contexted::invoke(context, argc, argv);
	    }; /* concept esp::console::Action::contexted */

	    template <class Syntax>
	    concept syntable = requires(Syntax syntax, void* buf)
	    {
		buf = /*Act::*/syntax.keep.data();
	    }; /* concept esp::console::Action::syntable */


	    template <class Act>
	    concept def = (nocontext<Act> || contexted<Act>) && syntable<decltype(Act::syntax)>;

	}; /* namespace esp::console::Action */


//	template <Act::define Action>
	struct cmd: public esp_console_cmd_t
	{
//	    template <class Syntax>
	    template <Action::syntable Syntax>
	    cmd(/*.command =*/ const char name[] /*"bt"*//* | bluetooth"*/,
		arg::table::act::invoke_func/*esp_console_cmd_func_t*/ /*exec_t*/ /*.func*/ exe /*= global_lambda*/,
			Syntax& /*.argtable*/ syntax /*bt::syntax*/,
			const char /*.help*/ help_str[] = nullptr /*"General Bluetooth command"*/,
			const char /*.hint*/ hint_str[] = nullptr /*"Bluetooth command exec"*/
//			esp_console_cmd_func_with_context_t /*.func_w_context*/ context_exe /*= nullptr*/,
//			void* /*.context*/ cntxt = nullptr
							):
		cmd(name, exe, syntax.keep.data(), help_str, hint_str)
		{};

//	    template <class Syntax>
	    template <Action::syntable Syntax>
	    cmd(/*.command =*/ char name[] /*"bt"*//* | bluetooth"*/,
//			esp_console_cmd_func_t /*.func*/ exe /*= global_lambda*/,
			arg::table::act::contexted::invoke_func/*esp_console_cmd_func_with_context_t*/ /*cntxt_exec_t*/ /*.func_w_context*/ context_exe /*= nullptr*/,
			Syntax& /*.argtable*/ syntax /*bt::syntax*/,
			const char /*.help*/ help_str[] = nullptr /*"General Bluetooth command"*/,
			const char /*.hint*/ hint_str[] = nullptr /*"Bluetooth command exec"*/,
			void* /*.context*/ cntxt = nullptr
							):
		cmd(name, context_exe, syntax.keep.data(), help_str, hint_str)
		{};

	    cmd(const char name[], esp_console_cmd_func_t exe, void* syntaxtable = nullptr,
			const char help_str[] = nullptr, const char hint_str[] = nullptr);
	    cmd(char name[], esp_console_cmd_func_with_context_t context_exe, void* syntaxtable = nullptr,
			const char help_str[] = nullptr, const char hint_str[] = nullptr, void* cntxt = nullptr);

	    esp_err_t enreg() const;	///< register current command

	    int errors() const { return errcnt; };

	protected:
	    mutable int errcnt = 0;

	}; /* template struct esp::console::cmd */



	template <Action::def Act>
	struct cmd_t: public esp::console::cmd
	{
	    // constructing cmd object for command execution w/o cintext
	    cmd_t(/*.command =*/ const char name[] /*"bt"*//* | bluetooth"*/,
		    //esp_console_cmd_func_t /*exec_t*/ /*.func*/ exe /*= global_lambda*/,
		    /*Cmd_act&& *//*.argtable & .func*//* act *//*bt::syntax*//*,*/
		    const char /*.help*/ help_str[] = nullptr /*"General Bluetooth command"*/,
		    const char /*.hint*/ hint_str[] = nullptr /*"Bluetooth command exec"*/
	//	    esp_console_cmd_func_with_context_t /*.func_w_context*/ context_exe /*= nullptr*/,
	//	    void* /*.context*/ cntxt = nullptr
								):
		    cmd(name, Act::invoke, Act::syntax, help_str, hint_str)
	    {};

	    /// constructing cmd object for command execution with cintext
	    cmd_t(/*.command =*/ const char name[] /*"bt"*//* | bluetooth"*/,
	//	//    esp_console_cmd_func_t /*.func*/ exe /*= global_lambda*/,
	//	    esp_console_cmd_func_with_context_t /*cntxt_exec_t*/ /*.func_w_context*/ context_exe /*= nullptr*/,
		    /*Act_w_cntxt&& *//*.argtable & .func_w_context & .context*/ /*cntxtact*/ /*bt::syntax*//*,*/
		    void* /*.context*/ context,
		    const char /*.help*/ help_str[] = nullptr /*"General Bluetooth command"*/,
		    const char /*.hint*/ hint_str[] = nullptr /*"Bluetooth command exec"*/
			):
		    cmd(name, Act::contexted::invoke, Act::syntax, help_str, hint_str)
	    {};

	}; /* template struct esp::console::cmd */

    }; /* namespace esp::console */
    
}; /* namespace esp */



#endif // __CONSOLE_CPP_WRAPPER__

//--[ console ]-------------------------------------------------------------------------------------------------------
