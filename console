/*!
 * @file console
 *
 * @brief Tiny C++ wrapper at ESP32 console library
 *
 * @detail Declaration of the classes, types & procedures for the C++ wrapper on ESP32 console library
 * Header include file.
 *
 * @section LICENCE
 *
 * This code is in the Public Domain (or CC0 licensed, at your option.)
 *
 * Unless required by applicable law or agreed to in writing, this
 * software is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied.
 *
 * @author: Solomatov A.A. (aso)
 * @version 0.6.5
 * @date Created on: 25 дек. 2024 г.
 *	    Updated: 03.02.2025
 */



#ifndef __CONSOLE_CPP_WRAPPER__
#define __CONSOLE_CPP_WRAPPER__


#ifndef __cplusplus
#error "'arctable' file is usable in C++ projects only."
#endif

#ifndef ESP_CONSOLE_CONFIG_DEFAULT
#error "The <esp_console.h> header must be included before including this file"
#endif

#ifndef __ARGTABLE3_CPP__
#error "The <'argtable> header file must be included before including this file"
#endif


namespace esp
{
    namespace console
    {
	template <class Act>
	struct cmd: public esp_console_cmd_t
	{
	    // constructing cmd object for command execution w/o cintext
	    cmd(/*.command =*/ const char name[] /*"bt"*//* | bluetooth"*/,
			//esp_console_cmd_func_t /*exec_t*/ /*.func*/ exe /*= global_lambda*/,
			/*Cmd_act&& *//*.argtable & .func*//* act *//*bt::syntax*//*,*/
			const char /*.help*/ help_str[] = nullptr /*"General Bluetooth command"*/,
			const char /*.hint*/ hint_str[] = nullptr /*"Bluetooth command exec"*/
//			esp_console_cmd_func_with_context_t /*.func_w_context*/ context_exe /*= nullptr*/,
//			void* /*.context*/ cntxt = nullptr
							):
		cmd(name, Act::invoke/*_impl*/, Act::syntax/*_st*/, help_str, hint_str)
		{};

	    // constructing cmd object for command execution w/o cintext
	    cmd(/*.command =*/ char name[] /*"bt"*//* | bluetooth"*/,
//	//		esp_console_cmd_func_t /*.func*/ exe /*= global_lambda*/,
//			esp_console_cmd_func_with_context_t /*cntxt_exec_t*/ /*.func_w_context*/ context_exe /*= nullptr*/,
			/*Act_w_cntxt&& *//*.argtable & .func_w_context & .context*/ /*cntxtact*/ /*bt::syntax*//*,*/
			void* /*.context*/ context,
			char /*.help*/ help_str[] = nullptr /*"General Bluetooth command"*/,
			char /*.hint*/ hint_str[] = nullptr /*"Bluetooth command exec"*/
							):
		cmd(name, Act::contexted::invoke, Act::syntax/*_st*/, help_str, hint_str)
		{};


	    template <class Syntax>
	    cmd(/*.command =*/ const char name[] /*"bt"*//* | bluetooth"*/,
			esp_console_cmd_func_t /*exec_t*/ /*.func*/ exe /*= global_lambda*/,
			Syntax& /*.argtable*/ syntax /*bt::syntax*/,
			const char /*.help*/ help_str[] = nullptr /*"General Bluetooth command"*/,
			const char /*.hint*/ hint_str[] = nullptr /*"Bluetooth command exec"*/
//			esp_console_cmd_func_with_context_t /*.func_w_context*/ context_exe /*= nullptr*/,
//			void* /*.context*/ cntxt = nullptr
							):
		cmd(name, exe, syntax.keep.data(), help_str, hint_str)
		{};

	    template <class Syntax>
	    cmd(/*.command =*/ char name[] /*"bt"*//* | bluetooth"*/,
//			esp_console_cmd_func_t /*.func*/ exe /*= global_lambda*/,
			esp_console_cmd_func_with_context_t /*cntxt_exec_t*/ /*.func_w_context*/ context_exe /*= nullptr*/,
			Syntax& /*.argtable*/ syntax /*bt::syntax*/,
			char /*.help*/ help_str[] = nullptr /*"General Bluetooth command"*/,
			char /*.hint*/ hint_str[] = nullptr /*"Bluetooth command exec"*/,
			void* /*.context*/ cntxt = nullptr
							):
		cmd(name, context_exe, syntax.keep.data(), help_str, hint_str)
		{};

	    cmd(const char name[], esp_console_cmd_func_t exe, void* syntaxtable = nullptr,
			const char help_str[] = nullptr, const char hint_str[] = nullptr);
	    cmd(char name[], esp_console_cmd_func_with_context_t context_exe, void* syntaxtable = nullptr,
			char help_str[] = nullptr, char hint_str[] = nullptr, void* cntxt = nullptr);

	    esp_err_t enreg() const;	///< register current command

	    int errors() const { return errcnt; };

	private:
	    mutable int errcnt = 0;

	}; /* template struct esp::console::cmd */


	/// constructror for command execute w/o context
	template <class Act>
	inline cmd<Act>::cmd(const char name[], esp_console_cmd_func_t exe, void* syntaxtable,
			const char help_str[], const char hint_str[]):
		esp_console_cmd_t {
			.command = name,
		        .help = help_str,
		        .hint = hint_str,
		        .func = exe,
			.argtable = syntaxtable,
			.func_w_context = nullptr,
			.context = nullptr
		}
	{};

	/// constructor for command execute implementation with context
	template <class Act>
	inline cmd<Act>::cmd(char name[], esp_console_cmd_func_with_context_t exec,
			void* syntaxtable, char help_str[], char hint_str[], void* cntxt):
		esp_console_cmd_t {
			.command = name,
		        .help = help_str,
		        .hint = hint_str,
		        .func = nullptr,
			.argtable = syntaxtable,
			.func_w_context = exec,
			.context = cntxt
		}
	{};

	//const esp::console::cmd bt_cmd ({
	//	.command = "bt"/* | bluetooth"*/,
	//        .help = "General Bluetooth command",
	//        .hint = nullptr/*"Bluetooth command exec"*/,
	//        .func = global_lambda,
	//	.argtable = bt::syntax,
	//	.func_w_context = nullptr,
	//	.context = nullptr
	//}); /* bt_cmd */

	/// register the current command
	template <class Act>
	esp_err_t inline cmd<Act>::enreg() const
	{
	    return esp_console_cmd_register(this);
	}; /* esp::console::cmd::enreg() */



    }; /* namespace esp::console */
    
}; /* namespace esp */



#endif // __CONSOLE_CPP_WRAPPER__

//--[ console ]-------------------------------------------------------------------------------------------------------
