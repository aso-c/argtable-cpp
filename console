/*!
 * @file console.cpp
 *
 * @brief Tiny C++ wrapper at ESP32 console library
 *
 * @detail Declaration of the classes, types & procedures for the C++ wrapper on ESP32 console library
 * Header include file.
 *
 * @section LICENCE
 *
 * This code is in the Public Domain (or CC0 licensed, at your option.)
 *
 * Unless required by applicable law or agreed to in writing, this
 * software is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied.
 *
 * @author: Solomatov A.A. (aso)
 * @version 0.1
 * @date Created on: 25 дек. 2024 г.
 *	    Updated: 25.12.2024
 */



#ifndef __CONSOLE_CPP_WRAPPER__
#define __CONSOLE_CPP_WRAPPER__


#ifndef __cplusplus
#error "'arctable' file is usable in C++ projects only."
#endif

#ifndef ESP_CONSOLE_CONFIG_DEFAULT
#error "The <esp_console.h> header must be included before including this file"
#endif

#ifndef __ARGTABLE3_CPP__
#error "The <'argtable> header file must be included before including this file"
#endif


namespace esp
{
    namespace console
    {
	struct cmd: public esp_console_cmd_t
	{

//	    typedef esp_err_t (*exec_t) (int argc, char* argv[], cmd* cmd_ctxt);
//	    typedef esp_err_t (*cntxt_exec_t) (void* context, int argc, char* argv[], cmd* cmd_ctxt);


	    cmd(/*.command =*/ const char name[] /*"bt"*//* | bluetooth"*/,
			esp_console_cmd_func_t /*exec_t*/ /*.func*/ exe /*= global_lambda*/,
			void* /*.argtable*/ syntaxtable = nullptr /*bt::syntax*/,
			const char /*.help*/ help_str[] = nullptr /*"General Bluetooth command"*/,
			const char /*.hint*/ hint_str[] = nullptr /*"Bluetooth command exec"*/
//			esp_console_cmd_func_with_context_t /*.func_w_context*/ context_exe /*= nullptr*/,
//			void* /*.context*/ cntxt = nullptr
);
	    cmd(/*.command =*/ char name[] /*"bt"*//* | bluetooth"*/,
//			esp_console_cmd_func_t /*.func*/ exe /*= global_lambda*/,
			esp_console_cmd_func_with_context_t /*cntxt_exec_t*/ /*.func_w_context*/ context_exe /*= nullptr*/,
			void* /*.argtable*/ syntaxtable = nullptr /*bt::syntax*/,
			char /*.help*/ help_str[] = nullptr /*"General Bluetooth command"*/,
			char /*.hint*/ hint_str[] = nullptr /*"Bluetooth command exec"*/,
			void* /*.context*/ cntxt = nullptr
);

	    template <class Cmd_core>
	    cmd(/*.command =*/ const char name[] /*"bt"*//* | bluetooth"*/,
			//esp_console_cmd_func_t /*exec_t*/ /*.func*/ exe /*= global_lambda*/,
			Cmd_core&& /*.argtable & .func*/ core /*bt::syntax*/,
			const char /*.help*/ help_str[] = nullptr /*"General Bluetooth command"*/,
			const char /*.hint*/ hint_str[] = nullptr /*"Bluetooth command exec"*/
//			esp_console_cmd_func_with_context_t /*.func_w_context*/ context_exe /*= nullptr*/,
//			void* /*.context*/ cntxt = nullptr
							):
		cmd(name, core.invoke, core.syntax.buffer, help_str, hint_str)
		{};

	    template <class Syntx_w_cntxt>
	    cmd(/*.command =*/ char name[] /*"bt"*//* | bluetooth"*/,
//	//		esp_console_cmd_func_t /*.func*/ exe /*= global_lambda*/,
//			esp_console_cmd_func_with_context_t /*cntxt_exec_t*/ /*.func_w_context*/ context_exe /*= nullptr*/,
			Syntx_w_cntxt&& /*.argtable & .func_w_context & .context*/ contextsyntax /*bt::syntax*/,
			char /*.help*/ help_str[] = nullptr /*"General Bluetooth command"*/,
			char /*.hint*/ hint_str[] = nullptr /*"Bluetooth command exec"*///,
//			void* /*.context*/ cntxt = nullptr
							);


	    esp_err_t enreg() const;	///< register current command

	    int parse(int argc, char* argv[]) const;	///< parsing the sended parameters

	    int errors() const { return errcnt; };


	    //exec_t executor;
	    //cntxt_exec_t context_exec;

//	    esp_err_t core_exec(int argc, char* argv[]);
//	    esp_err_t context_exec_core(void* context, int argc, char* argv[]);

	private:
	    mutable int errcnt = 0;
	}; /* struct esp::console::cmd */


	/// lite C++ wrapper on the esp_console_cmd_t struct
	struct lcmd: public esp_console_cmd_t
	{
	    template <class Syntax>
	    lcmd(/*.command =*/ const char name[] /*"bt"*//* | bluetooth"*/,
			//esp_console_cmd_func_t /*exec_t*/ /*.func*/ exe /*= global_lambda*/,
			Syntax&& /*.argtable & .func*/ syntax /*bt::syntax*/,
			const char /*.help*/ help_str[] = nullptr /*"General Bluetooth command"*/,
			const char /*.hint*/ hint_str[] = nullptr /*"Bluetooth command exec"*/
//			esp_console_cmd_func_with_context_t /*.func_w_context*/ context_exe /*= nullptr*/,
//			void* /*.context*/ cntxt = nullptr
							);
	    template <class Syntx_w_cntxt>
	    lcmd(/*.command =*/ char name[] /*"bt"*//* | bluetooth"*/,
//	//		esp_console_cmd_func_t /*.func*/ exe /*= global_lambda*/,
//			esp_console_cmd_func_with_context_t /*cntxt_exec_t*/ /*.func_w_context*/ context_exe /*= nullptr*/,
			Syntx_w_cntxt&& /*.argtable & .func_w_context & .context*/ contextsyntax /*bt::syntax*/,
			char /*.help*/ help_str[] = nullptr /*"General Bluetooth command"*/,
			char /*.hint*/ hint_str[] = nullptr /*"Bluetooth command exec"*///,
//			void* /*.context*/ cntxt = nullptr
							);

	    int errors() const { return errcnt; };

	private:
	    mutable int errcnt = 0;

	}; /* struct esp::console::lcmd */


    }; /* namespace esp::console */
    
}; /* namespace esp */



#endif // __CONSOLE_CPP_WRAPPER__

//--[ console ]-------------------------------------------------------------------------------------------------------
