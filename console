/*!
 * @file console
 *
 * @brief Tiny C++ wrapper at ESP32 console library
 *
 * @detail Declaration of the classes, types & procedures for the C++ wrapper on ESP32 console library
 * Header include file.
 *
 * @section LICENCE
 *
 * This code is in the Public Domain (or CC0 licensed, at your option.)
 *
 * Unless required by applicable law or agreed to in writing, this
 * software is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied.
 *
 * @author: Solomatov A.A. (aso)
 * @version 0.6.11
 * @date Created on: 25 дек. 2024 г.
 *	    Updated: 14.02.2025
 */



#ifndef __CONSOLE_CPP_WRAPPER__
#define __CONSOLE_CPP_WRAPPER__


#ifndef __cplusplus
#error "'arctable' file is usable in C++ projects only."
#endif

#ifndef ESP_CONSOLE_CONFIG_DEFAULT
#error "The <esp_console.h> header must be included before including this file"
#endif

#ifndef __ARGTABLE3_CPP__
#error "The <'argtable> header file must be included before including this file"
#endif


namespace esp
{
    namespace console
    {

	namespace Action
	{
	    template <class Act>
	    concept nocontext = requires(int argc, char* argv[], esp_err_t ret)
	    {
		ret = Act::invoke(argc, argv);
	    }; /* concept esp::console::Action::nocontext */

	    template <class Act>
	    concept contexted = requires(void* context, int argc, char* argv[], esp_err_t ret)
	    {
		typename Act::contexted;
		ret = Act::contexted::invoke(context, argc, argv);
	    }; /* concept esp::console::Action::contexted */

	    template <class Syntax>
	    concept syntable = requires(Syntax syntax, void* buf)
	    {
		buf = syntax.keep.data();
	    }; /* concept esp::console::Action::syntable */


	    template <class Act>
	    concept def = (nocontext<Act> || contexted<Act>) && syntable<decltype(Act::syntax)>;

	}; /* namespace esp::console::Action */


	/// simple core C++ wrapper on the esp_console_cmd_t
	struct cmd: public esp_console_cmd_t
	{
	    template <Action::syntable Syntax>
	    cmd(const char name[], Syntax& syntax, arg::table::act::invoke_func exe,
		    const char help_str[] = nullptr, const char hint_str[] = nullptr):
		cmd(name, syntax.keep.data(), exe, help_str, hint_str)
	    {};

	    template <Action::syntable Syntax>
	    cmd(char name[], Syntax& syntax, arg::table::act::contexted::invoke_func exe_context,
		    void* context, const char help_str[] = nullptr, const char hint_str[] = nullptr):
		cmd(name, syntax.keep.data(), exe_context, context, help_str, hint_str)
		{};
	    /// Simple constructor for context-free command variant - individual field initialization
	    cmd(const char name[], void* syntaxtable[], esp_console_cmd_func_t exe,
			const char help_str[] = nullptr, const char hint_str[] = nullptr);
	    /// Simple constructor for contexted command variant - individual field initialization
	    cmd(char name[], void* syntaxtable[], esp_console_cmd_func_with_context_t context_exe,
		    void* context, const char help_str[] = nullptr, const char hint_str[] = nullptr);
	    /// Individual field initialization constructor with zero-syntax for context-free command variant
	    cmd(const char name[], esp_console_cmd_func_t exe, const char help_str[] = nullptr,
		    const char hint_str[] = nullptr):
			cmd(name, nullptr, exe, help_str, hint_str) {};
	    /// Individual field initialization constructor with zero-syntax for contexted command variant
	    cmd(char name[], esp_console_cmd_func_with_context_t context_exe, void* context, const char help_str[] = nullptr,
		    const char hint_str[] = nullptr):
			cmd(name, nullptr, context_exe, context, help_str, hint_str) {};

	    esp_err_t enreg() const;	///< register current command
	   void enreg_check() const {ESP_ERROR_CHECK(enreg());};	///< register current command with error checking

	    int errors() const { return errcnt; };

	protected:
	    mutable int errcnt = 0;

	}; /* template struct esp::console::cmd */



	template <Action::def Act>
	struct cmd_t: public esp::console::cmd
	{
	    /// constructing cmd object for command execution w/o context
	    /// requires Action::nocontext
	    cmd_t(const char name[], const char help_str[] = nullptr,
		    const char hint_str[] = nullptr):
		cmd(name, Act::syntax, Act::invoke, help_str, hint_str)
	    { static_assert(Action::nocontext<Act>, "The Act type for cmd_t object must have a static method esp_err_t invoke(int, char* [])"); };

	    /// constructing cmd object for command execution with cintext
	    /// requires Action::contexted
	    cmd_t(const char name[], void* context, const char help_str[] = nullptr,
		    const char hint_str[] = nullptr):
		cmd(name, Act::syntax, Act::contexted::invoke, context, help_str, hint_str)
	    { static_assert(Action::contexted<Act>, "The Act type for cmd_t object must contain a subclass 'contexted' with a static method esp_err_t contexted::invoke(void*, int, char* [])"); };

	}; /* template struct esp::console::cmd */

    }; /* namespace esp::console */
    
}; /* namespace esp */



#endif // __CONSOLE_CPP_WRAPPER__

//--[ console ]-------------------------------------------------------------------------------------------------------
